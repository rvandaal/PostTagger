<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Behaviors="clr-namespace:PDFTagger.Behaviors" xmlns:Controls="clr-namespace:PDFTagger.Controls">

    <Style x:Key="InfoBalloonErrorStyle" TargetType="{x:Type Controls:InfoBalloon}">
        <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorTextBrush}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{DynamicResource ValidationErrorTextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,5,10,8" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Controls:InfoBalloon">
                    <!--
                        NOTE: although the IsOpen property in the InfoBalloon is not defined as BindsTwoWayByDefault,
                        the IsOpen property of the Popup still is, so the binding is still TwoWay by default!!
                        We want one way binding here, so set it explicitly. This solved a bug.
                    -->
                    <Controls:TrackablePopup x:Name="PART_Popup" AllowsTransparency="True"
                                             HorizontalOffset="{TemplateBinding HorizontalOffset}"
                                             IsOpen="{Binding Path=(Controls:InfoBalloon.IsOpen),
                                                              Mode=OneWay,
                                                              RelativeSource={RelativeSource Self}}"
                                             VerticalOffset="{TemplateBinding VerticalOffset}">
                        <Grid MinHeight="50" MaxWidth="200"
                              Margin="0,0,8,8">
                            <Grid.Effect>
                                <DropShadowEffect BlurRadius="5" ShadowDepth="4"
                                                  Color="Gray" />
                            </Grid.Effect>
                            <Border x:Name="outerBorder" Margin="17,0,0,0"
                                    Background="{TemplateBinding BorderBrush}" />
                            <Path x:Name="arrowPath" Width="20"
                                  Height="30" HorizontalAlignment="Left"
                                  VerticalAlignment="Center" Data="M 0 0 L -1 1 L 0 2"
                                  Fill="{TemplateBinding Background}"
                                  Stretch="Fill"
                                  Stroke="{TemplateBinding BorderBrush}"
                                  StrokeThickness="2" />
                            <Grid Margin="{Binding Margin, ElementName=outerBorder}">
                                <Border x:Name="innerBorder" Margin="2"
                                        Background="{TemplateBinding Background}">
                                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <ContentPresenter.Resources>
                                            <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
                                                <Setter Property="TextWrapping" Value="WrapWithOverflow" />
                                                <Setter Property="Behaviors:TextBlockBehavior.HasAutoToolTip" Value="False" />
                                            </Style>
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>
                                </Border>
                            </Grid>
                        </Grid>
                    </Controls:TrackablePopup>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
</ResourceDictionary>